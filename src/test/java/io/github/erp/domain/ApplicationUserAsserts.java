package io.github.erp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ApplicationUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserAllPropertiesEquals(ApplicationUser expected, ApplicationUser actual) {
        assertApplicationUserAutoGeneratedPropertiesEquals(expected, actual);
        assertApplicationUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserAllUpdatablePropertiesEquals(ApplicationUser expected, ApplicationUser actual) {
        assertApplicationUserUpdatableFieldsEquals(expected, actual);
        assertApplicationUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserAutoGeneratedPropertiesEquals(ApplicationUser expected, ApplicationUser actual) {
        assertThat(expected)
            .as("Verify ApplicationUser auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserUpdatableFieldsEquals(ApplicationUser expected, ApplicationUser actual) {
        assertThat(expected)
            .as("Verify ApplicationUser relevant properties")
            .satisfies(e -> assertThat(e.getUsername()).as("check username").isEqualTo(actual.getUsername()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getActivated()).as("check activated").isEqualTo(actual.getActivated()))
            .satisfies(e -> assertThat(e.getLangKey()).as("check langKey").isEqualTo(actual.getLangKey()))
            .satisfies(e -> assertThat(e.getImageUrl()).as("check imageUrl").isEqualTo(actual.getImageUrl()))
            .satisfies(e -> assertThat(e.getActivationKey()).as("check activationKey").isEqualTo(actual.getActivationKey()))
            .satisfies(e -> assertThat(e.getResetKey()).as("check resetKey").isEqualTo(actual.getResetKey()))
            .satisfies(e -> assertThat(e.getResetDate()).as("check resetDate").isEqualTo(actual.getResetDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserUpdatableRelationshipsEquals(ApplicationUser expected, ApplicationUser actual) {
        assertThat(expected)
            .as("Verify ApplicationUser relationships")
            .satisfies(e -> assertThat(e.getInstitution()).as("check institution").isEqualTo(actual.getInstitution()));
    }
}
